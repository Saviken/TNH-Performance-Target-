# Helper functions for migration
def copy_criteria_to_old(apps, schema_editor):
    Post = apps.get_model('posts', 'Post')
    db_alias = schema_editor.connection.alias
    for post in Post.objects.using(db_alias).all():
        criteria_value = getattr(post, 'criteria', None)
        if criteria_value and isinstance(criteria_value, str):
            post.criteria_old = criteria_value
            post.save()

def create_criteria_and_temp_id(apps, schema_editor):
    Post = apps.get_model('posts', 'Post')
    Criteria = apps.get_model('posts', 'Criteria')
    db_alias = schema_editor.connection.alias
    for post in Post.objects.using(db_alias).all():
        criteria_value = getattr(post, 'criteria_old', None)
        if criteria_value:
            criteria_obj, _ = Criteria.objects.using(db_alias).get_or_create(name=criteria_value)
            post.criteria_temp_id = criteria_obj.id
            post.save()

def copy_temp_id_to_fk(apps, schema_editor):
    Post = apps.get_model('posts', 'Post')
    db_alias = schema_editor.connection.alias
    for post in Post.objects.using(db_alias).all():
        temp_id = getattr(post, 'criteria_temp_id', None)
        if temp_id:
            post.criteria_id = temp_id
            post.save()

# Helper functions for migration
def copy_criteria_to_temp(apps, schema_editor):
    Post = apps.get_model('posts', 'Post')
    db_alias = schema_editor.connection.alias
    for post in Post.objects.using(db_alias).all():
        criteria_value = getattr(post, 'criteria', None)
        if criteria_value and isinstance(criteria_value, str):
            post.criteria_temp = criteria_value
            post.save()

def create_criteria_and_temp_id(apps, schema_editor):
    Post = apps.get_model('posts', 'Post')
    Criteria = apps.get_model('posts', 'Criteria')
    db_alias = schema_editor.connection.alias
    for post in Post.objects.using(db_alias).all():
        criteria_value = getattr(post, 'criteria_temp', None)
        if criteria_value:
            criteria_obj, _ = Criteria.objects.using(db_alias).get_or_create(name=criteria_value)
            post.criteria_temp_id = criteria_obj.id
            post.save()

def copy_temp_id_to_fk(apps, schema_editor):
    Post = apps.get_model('posts', 'Post')
    db_alias = schema_editor.connection.alias
    for post in Post.objects.using(db_alias).all():
        temp_id = getattr(post, 'criteria_temp_id', None)
        if temp_id:
            post.criteria_id = temp_id
            post.save()

# Helper functions for migration
def create_criteria_and_temp(apps, schema_editor):
    Post = apps.get_model('posts', 'Post')
    Criteria = apps.get_model('posts', 'Criteria')
    db_alias = schema_editor.connection.alias
    for post in Post.objects.using(db_alias).all():
        criteria_value = getattr(post, 'criteria', None)
        if criteria_value and isinstance(criteria_value, str):
            criteria_obj, _ = Criteria.objects.using(db_alias).get_or_create(name=criteria_value)
            post.criteria_temp = criteria_obj.id
            post.save()

def copy_temp_to_fk(apps, schema_editor):
    Post = apps.get_model('posts', 'Post')
    db_alias = schema_editor.connection.alias
    for post in Post.objects.using(db_alias).all():
        temp_id = getattr(post, 'criteria_temp', None)
        if temp_id:
            post.criteria_id = temp_id
            post.save()

# Generated by Django 5.2.1 on 2025-07-17 10:22

import django.db.models.deletion
from django.db import migrations, models


# Helper function to migrate string criteria to FK
def migrate_criteria_strings_to_fk(apps, schema_editor):
    Post = apps.get_model('posts', 'Post')
    Criteria = apps.get_model('posts', 'Criteria')
    db_alias = schema_editor.connection.alias

    for post in Post.objects.using(db_alias).all():
        criteria_value = getattr(post, 'criteria', None)
        if criteria_value and isinstance(criteria_value, str):
            criteria_obj, _ = Criteria.objects.using(db_alias).get_or_create(name=criteria_value)
            post.criteria = criteria_obj
            post.save()

# Generated by Django 5.2.1 on 2025-07-17 10:22

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('posts', '0006_remove_division_department_branch_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='Criteria',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.AddField(
            model_name='post',
            name='criteria_old',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.RunPython(
            code=copy_criteria_to_old,
            reverse_code=migrations.RunPython.noop,
        ),
        migrations.RemoveField(
            model_name='post',
            name='criteria',
        ),
        migrations.AddField(
            model_name='post',
            name='criteria_temp_id',
            field=models.BigIntegerField(blank=True, null=True),
        ),
        migrations.RunPython(
            code=create_criteria_and_temp_id,
            reverse_code=migrations.RunPython.noop,
        ),
        migrations.AddField(
            model_name='post',
            name='criteria',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='posts', to='posts.criteria'),
        ),
        migrations.RunPython(
            code=copy_temp_id_to_fk,
            reverse_code=migrations.RunPython.noop,
        ),
        migrations.RemoveField(
            model_name='post',
            name='criteria_old',
        ),
        migrations.RemoveField(
            model_name='post',
            name='criteria_temp_id',
        ),
    ]


# Helper function to migrate string criteria to FK
def migrate_criteria_strings_to_fk(apps, schema_editor):
    Post = apps.get_model('posts', 'Post')
    Criteria = apps.get_model('posts', 'Criteria')
    db_alias = schema_editor.connection.alias

    for post in Post.objects.using(db_alias).all():
        criteria_value = getattr(post, 'criteria', None)
        if criteria_value and isinstance(criteria_value, str):
            criteria_obj, _ = Criteria.objects.using(db_alias).get_or_create(name=criteria_value)
            post.criteria = criteria_obj
            post.save()
